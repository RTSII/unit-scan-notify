migrations/20250918_153000__violation_photos_normalization.sql; BEGIN;

-- 1) Create normalized violation forms table (non-destructive) CREATE TABLE IF NOT EXISTS public.violation_forms_new ( id bigint primary key generated always as identity, old_uuid_id uuid, user_id uuid NOT NULL REFERENCES auth.users(id), unit_number text, occurred_at timestamp with time zone, location text, description text, status text DEFAULT 'saved', created_at timestamp with time zone DEFAULT now(), updated_at timestamp with time zone DEFAULT now() );

-- Indexes for foreign keys and common filters CREATE INDEX IF NOT EXISTS idx_violation_forms_new_user_id ON public.violation_forms_new (user_id); CREATE INDEX IF NOT EXISTS idx_violation_forms_new_status ON public.violation_forms_new (status);

-- 2) Create normalized violation photos table (non-destructive) CREATE TABLE IF NOT EXISTS public.violation_photos ( id bigint primary key generated always as identity, violation_id bigint NOT NULL REFERENCES public.violation_forms_new(id), uploaded_by uuid NOT NULL REFERENCES auth.users(id), storage_path text NOT NULL, created_at timestamp with time zone DEFAULT now() );

-- Indexes for foreign keys and performance CREATE INDEX IF NOT EXISTS idx_violation_photos_violation_id ON public.violation_photos (violation_id); CREATE INDEX IF NOT EXISTS idx_violation_photos_uploaded_by ON public.violation_photos (uploaded_by);

-- 3) Data migration: copy rows from existing public.violation_forms into public.violation_forms_new -- - We store the original uuid id in old_uuid_id for traceability -- - Map date + time to occurred_at with fallback rules INSERT INTO public.violation_forms_new (old_uuid_id, user_id, unit_number, occurred_at, location, description, status, created_at, updated_at) SELECT id::uuid AS old_uuid_id, user_id, unit_number, CASE WHEN date IS NOT NULL AND time IS NOT NULL THEN (date::timestamp + time::interval) WHEN date IS NOT NULL AND time IS NULL THEN date::timestamp WHEN date IS NULL AND time IS NOT NULL THEN (now()::date::timestamp + time::interval) ELSE NULL END AT TIME ZONE 'UTC' AS occurred_at, location, description, COALESCE(status, 'saved') AS status, created_at, updated_at FROM public.violation_forms ORDER BY created_at;

-- 4) Data migration: normalize photos arrays (explode photos arrays into violation_photos) -- - Assumes original table public.violation_forms has a column photos that is an array of text (text[]) WITH mapping AS ( SELECT id AS new_id, old_uuid_id FROM public.violation_forms_new ), photos_exploded AS ( SELECT m.new_id AS violation_id, vf.user_id AS uploaded_by, unnest(vf.photos) AS storage_path, vf.created_at FROM public.violation_forms vf JOIN mapping m ON vf.id::uuid = m.old_uuid_id ) INSERT INTO public.violation_photos (violation_id, uploaded_by, storage_path, created_at) SELECT violation_id, uploaded_by, storage_path, created_at FROM photos_exploded WHERE storage_path IS NOT NULL AND storage_path <> '';

-- 5) Enable Row Level Security on the new tables ALTER TABLE public.violation_forms_new ENABLE ROW LEVEL SECURITY; ALTER TABLE public.violation_photos ENABLE ROW LEVEL SECURITY;

-- 6) Create RLS policies (atomic, role-scoped) following Supabase best practices -- Violation forms policies CREATE POLICY "Reporter INSERT" ON public.violation_forms_new FOR INSERT TO authenticated WITH CHECK ((SELECT auth.uid()) = user_id); CREATE POLICY "Reporter SELECT" ON public.violation_forms_new FOR SELECT TO authenticated USING (user_id = (SELECT auth.uid())); CREATE POLICY "Reporter UPDATE" ON public.violation_forms_new FOR UPDATE TO authenticated USING (user_id = (SELECT auth.uid())) WITH CHECK (user_id = (SELECT auth.uid())); CREATE POLICY "Reporter DELETE" ON public.violation_forms_new FOR DELETE TO authenticated USING (user_id = (SELECT auth.uid()));

-- Violation photos policies CREATE POLICY "Photo INSERT by uploader" ON public.violation_photos FOR INSERT TO authenticated WITH CHECK ((SELECT auth.uid()) = uploaded_by); CREATE POLICY "Photo SELECT uploader_or_reporter" ON public.violation_photos FOR SELECT TO authenticated USING ( uploaded_by = (SELECT auth.uid()) OR violation_id IN (SELECT id FROM public.violation_forms_new WHERE user_id = (SELECT auth.uid())) ); CREATE POLICY "Photo UPDATE uploader_only" ON public.violation_photos FOR UPDATE TO authenticated USING (uploaded_by = (SELECT auth.uid())) WITH CHECK (uploaded_by = (SELECT auth.uid())); CREATE POLICY "Photo DELETE uploader_or_reporter" ON public.violation_photos FOR DELETE TO authenticated USING ( uploaded_by = (SELECT auth.uid()) OR violation_id IN (SELECT id FROM public.violation_forms_new WHERE user_id = (SELECT auth.uid())) );

-- 7) Grant minimal privileges to authenticated role for convenience (RLS still applies) GRANT SELECT, INSERT, UPDATE, DELETE ON public.violation_forms_new TO authenticated; GRANT SELECT, INSERT, UPDATE, DELETE ON public.violation_photos TO authenticated;

COMMIT; -- End of file
